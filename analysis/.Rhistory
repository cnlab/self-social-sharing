within = messages %>%
group_by(survey_name, SID) %>%
mutate(trial = row_number(),
value_within = scale(value, scale = FALSE, center = TRUE),
survey_name_within = sprintf("%s_within", survey_name)) %>%
group_by(survey_name) %>%
mutate(value_sd = sd(value_within, na.rm = TRUE),
value_within = value_within / value_sd) %>%
ungroup() %>%
select(-value, -value_sd, -survey_name) %>%
spread(survey_name_within, value_within)
data_mod_diss = messages %>%
group_by(survey_name, SID) %>%
mutate(trial = row_number()) %>%
group_by(item) %>%
#mutate(value = scale(value, scale = TRUE, center = TRUE)) %>%
spread(survey_name, value) %>%
left_join(., between) %>%
left_join(., within) %>%
ungroup() %>%
mutate(SID = as.factor(SID)) %>%
unique() %>%
select(-msg_sharing_broad_between, -msg_sharing_broad_within, -msg_sharing_narrow_between, -msg_sharing_narrow_within) %>%
gather(sharing_type, msg_share, contains("sharing")) %>%
mutate(sharing_type = ifelse(sharing_type == "msg_sharing_broad", 0, 1)) %>%
mutate(study = "study 3",
item = sprintf("%s_%s_%s", study, group, item),
SID = sprintf("%s_%s", study, SID),
content = "voting") %>%
select(study, group, SID, item, content, trial, sharing_type, msg_share, contains("rel_"))
demo = data_raw %>%
filter(grepl("gender|race$|hispanic_latinx|student_grade", item)) %>%
ungroup() %>%
select(SID, item, value) %>%
mutate(value = ifelse(item %in% c("gender"),
yes = recode(value, "1" = "Man",
"2" = "Non-binary / third gender",
"3" = "Woman",
"4" = "Prefer to self-describe",
"5" = "Prefer not to say"),
no = value),
value = ifelse(item %in% c("hispanic_latinx"),
yes = recode(value, "1" = "Yes",
"0" = "No",
"2" = "Prefer not to say"),
no = value),
value = ifelse(item %in% c("race"),
yes = recode(value, "1" = "American Indian or Alaskan Native",
"2" = "Asian",
"3" = "Black or African American",
"4" = "Native Hawaiian or other Pacific Islander",
"5" = "White",
"6" = "More than one race",
"7" = "Prefer not to say"),
no = value),
value = ifelse(item %in% c("student_grade"),
yes = recode(value, "1" = "First year",
"2" = "Second year",
"3" = "Third year",
"4" = "Fourth year",
"5" = "Fifth year or higher"),
no = value),
item = gsub("hispanic_latinx", "Hispanic or Latinx", item)) %>%
spread(item, value) %>%
mutate(race = ifelse(is.na(race), race_self, race),
gender = ifelse(gender == "Prefer to self-describe", gender_4_TEXT, gender),
study = "study 3",
SID = sprintf("%s_%s", study, SID)) %>%
gather(item, value, -SID, -study)
write.csv(data_mod_diss, "../data/study3.csv", row.names = FALSE)
write.csv(demo, "../data/study3_demo.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
options(scipen = 999)
plot_model = function(model_data, palette, size = .35) {
model_data %>%
mutate(term = gsub("msg_", "", term),
term = gsub("_", " ", term),
term = gsub(":", " x ", term),
term = gsub("rel self", "self", term),
term = gsub("rel social", "social", term),
term = gsub(" within", "\nwithin", term),
term = gsub(" between", "\nbetween", term)) %>%
ggplot(aes(x = term, y = estimate, color = study)) +
geom_pointrange(aes( ymin = conf.low, ymax = conf.high), position = position_dodge(.5), size = size) +
geom_hline(yintercept = 0, color = "grey50", linetype = "dotted") +
coord_flip() +
scale_fill_manual(name = "", values = palette) +
scale_color_manual(name = "", values = palette) +
labs(x = "", y = "\nstandardized  regression coefficient\n") +
plot_aes
}
table_model = function(model_data) {
model_data %>%
rename("SE" = std.error,
"t" = statistic,
"p" = p.value) %>%
select(-group, -effect) %>%
mutate_at(vars(-contains("term"), -contains("value"), -contains("study")), round, 2) %>%
mutate(term = gsub("msg_", "", term),
term = gsub("_", " ", term),
term = gsub(":", " x ", term),
term = gsub("rel self", "self", term),
term = gsub("rel social", "social", term),
term = gsub("within", "within", term),
term = gsub("between", "between", term),
term = gsub("sharing type", "sharing type (narrowcast)", term),
term = ifelse(grepl("between x ", term), "sharing type (narrowcast) x self relevance between", term),
p = ifelse(p < .001, "< .001",
ifelse(p == 1, "1.000", gsub("0.(.*)", ".\\1", sprintf("%.3f", p)))),
`b [95% CI]` = sprintf("%.2f [%0.2f, %.2f]", estimate, conf.low, conf.high)) %>%
select(study, term, `b [95% CI]`, df, t, p) %>%
arrange(study) %>%
kable()  %>%
kable_styling()
}
# load packages
if (!require(tidyverse)) {
install.packages('tidyverse')
}
if (!require(knitr)) {
install.packages('knitr')
}
if (!require(kableExtra)) {
install.packages('kableExtra')
}
if (!require(lmerTest)) {
install.packages('lmerTest')
}
if (!require(ggpubr)) {
install.packages('ggpubr')
}
devtools::install_github("hadley/emo")
# define aesthetics
palette = c("#E64626", "#FF9900", "#FFE136", "#E0BF00", "#00A896","#1985A1", "#165F8D", "#5A69AF", "#393993")
palette_sharing = c("#4c5c68", "#B8B3BE")
palette_relevance = c("#A42B13", "#EE6C4D", "#3D5A80", "#98C1D9")
plot_aes = theme_minimal() +
theme(legend.position = "top",
legend.text = element_text(size = 12),
text = element_text(size = 16, family = "Futura Medium"),
axis.text = element_text(color = "black"),
axis.line = element_line(colour = "black"),
axis.ticks.y = element_blank())
# load and merge data
# article info
# article_info_study5 = read.csv("../../correlational_study/articles.csv", stringsAsFactors = FALSE) %>%
#   select(main_headline, clicks)
article_info_study6 = read.csv("../../causal_study/original_stim_list.csv", stringsAsFactors = FALSE) %>%
select(main_headline, clicks)
articles = read.csv("../../causal_study/articles.csv", stringsAsFactors = FALSE) %>%
left_join(., article_info_study6) %>%
mutate(item = sprintf("study 6_%s", article_number)) %>%
select(content, item, clicks)
study1 = read.csv("../data/study1.csv", stringsAsFactors = FALSE)
study2 = read.csv("../data/study2.csv", stringsAsFactors = FALSE)
study3 = read.csv("../data/study3.csv", stringsAsFactors = FALSE)
study4 = read.csv("../data/study4.csv", stringsAsFactors = FALSE)
study5 = read.csv("../data/study5.csv", stringsAsFactors = FALSE)
study6 = read.csv("../data/study6.csv", stringsAsFactors = FALSE) %>%
select(-article_cond)
merged = bind_rows(study1, study2, study3, study4, study5, study6) %>%
group_by(study, sharing_type) %>%
mutate(msg_share_std = scale(msg_share, scale = TRUE, center = TRUE))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 1 + msg_rel_self_between + msg_rel_self_within +
(1 + msg_rel_self_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer_self = merged %>%
mutate(study = ifelse(sharing_type == 0, sprintf("%s\n%s", study, "broadcast"), sprintf("%s\n%s", study, "narrowcast"))) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
summary(model_lmer_self$test[[1]])
summary(model_lmer_self$test[[2]])
summary(model_lmer_self$test[[3]])
summary(model_lmer_self$test[[4]])
summary(model_lmer_self$test[[5]])
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_self_between + msg_rel_self_within +
(1 + msg_rel_self_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer_self = merged %>%
mutate(study = ifelse(sharing_type == 0, sprintf("%s\n%s", study, "broadcast"), sprintf("%s\n%s", study, "narrowcast"))) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
summary(model_lmer_self$test[[5]])
summary(model_lmer_self$test[[1]])
summary(model_lmer_self$test[[2]])
summary(model_lmer_self$test[[3]])
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_self_between + msg_rel_self_within +
(1 + msg_rel_self_within | SID) +
(1 + msg_rel_self_within | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer_self = merged %>%
mutate(study = ifelse(sharing_type == 0, sprintf("%s\n%s", study, "broadcast"), sprintf("%s\n%s", study, "narrowcast"))) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
summary(model_lmer_self$test[[3]])
summary(model_lmer_self$test[[1]])
summary(model_lmer_self$test[[2]])
summary(model_lmer_self$test[[3]])
summary(model_lmer_self$test[[4]])
summary(model_lmer_self$test[[5]])
summary(model_lmer_self$test[[6]])
summary(model_lmer_self$test[[7]])
summary(model_lmer_self$test[[8]])
summary(model_lmer_self$test[[9]])
(self = plot_model(model_data_self, palette) +
annotate(geom = "label", x = Inf, y = -Inf, hjust = -.05, vjust = 1, label = "self-relevance only model",
family = "Futura Medium", size = 5, fill = "white", label.size = NA) +
scale_y_continuous(limits = c(-.25, 1), breaks = seq(-.25, 1, .25)) +
theme(legend.position = "none"))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between + msg_rel_social_within +
(1 + msg_rel_social_within | SID) +
(1 + msg_rel_social_within | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer_social = merged  %>%
mutate(study = ifelse(sharing_type == 0, sprintf("%s\n%s", study, "broadcast"), sprintf("%s\n%s", study, "narrowcast"))) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
summary(model_lmer_social$test[[1]])
summary(model_lmer_social$test[[2]])
summary(model_lmer_social$test[[3]])
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between + msg_rel_social_within +
(1 + msg_rel_social_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer_social = merged  %>%
mutate(study = ifelse(sharing_type == 0, sprintf("%s\n%s", study, "broadcast"), sprintf("%s\n%s", study, "narrowcast"))) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_self_between + msg_rel_self_within +
(1 + msg_rel_self_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer_self = merged %>%
mutate(study = ifelse(sharing_type == 0, sprintf("%s\n%s", study, "broadcast"), sprintf("%s\n%s", study, "narrowcast"))) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_self_between + msg_rel_self_within +
msg_rel_social_between + msg_rel_social_within +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
mutate(study = ifelse(sharing_type == 0, sprintf("%s\n%s", study, "broadcast"), sprintf("%s\n%s", study, "narrowcast"))) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between + msg_rel_social_within +
(1 + msg_rel_social_within | SID) +
(1 + msg_rel_social_between | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer_social = merged  %>%
mutate(study = ifelse(sharing_type == 0, sprintf("%s\n%s", study, "broadcast"), sprintf("%s\n%s", study, "narrowcast"))) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between + msg_rel_social_within +
(1 + msg_rel_social_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer_social = merged  %>%
mutate(study = ifelse(sharing_type == 0, sprintf("%s\n%s", study, "broadcast"), sprintf("%s\n%s", study, "narrowcast"))) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_self_between + msg_rel_self_within +
msg_rel_social_between + msg_rel_social_within +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
mutate(study = ifelse(sharing_type == 0, sprintf("%s\n%s", study, "broadcast"), sprintf("%s\n%s", study, "narrowcast"))) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 + msg_rel_self_within | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
filter(grepl("3|5|6", study)) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 + msg_rel_social_between | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
filter(grepl("3|5|6", study)) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 + msg_rel_self_between | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
filter(grepl("3|5|6", study)) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 + msg_rel_social_within | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
filter(grepl("3|5|6", study)) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
AIC(model_lmer$test[[1]])
AIC(model_lmer$test[[2]])
AIC(model_lmer$test[[3]])
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 + msg_rel_self_within | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
filter(grepl("3|5|6", study)) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 + msg_rel_self_within | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
filter(grepl("3|5|6", study)) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
AIC(model_lmer$test[[1]])
AIC(model_lmer$test[[2]])
AIC(model_lmer$test[[3]])
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within*sharing_type + msg_rel_social_within*sharing_type | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
filter(grepl("3|5|6", study)) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within*sharing_type + msg_rel_social_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
filter(grepl("3|5|6", study)) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
fit_mod = function(data){
mod = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
(1 + msg_rel_self_within + msg_rel_social_within | SID) +
(1 | item), data = data,
control = lmerControl(optimizer = "bobyqa"))
return(mod)
}
model_lmer = merged  %>%
filter(grepl("3|5|6", study)) %>%
group_by(study) %>%
nest() %>%
mutate(test = map(data, fit_mod))
model_compare = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
(1 + msg_rel_self_within&sharing_type + msg_rel_social_within&sharing_type | SID) +
(1 + msg_rel_self_within + msg_rel_social_within | item) +
(0 + msg_rel_social_between + msg_rel_self_within | study),
data = merged,
control = lmerControl(optimizer = "bobyqa"))
summary(model_compare)
model_compare = lmerTest::lmer(msg_share_std ~ 0 + msg_rel_self_between*sharing_type +
msg_rel_self_within*sharing_type +
msg_rel_social_between*sharing_type +
msg_rel_social_within*sharing_type +
(1 + msg_rel_self_within*sharing_type + msg_rel_social_within*sharing_type | SID) +
(1 + msg_rel_self_within + msg_rel_social_within | item) +
(0 + msg_rel_social_between + msg_rel_self_within | study),
data = merged,
control = lmerControl(optimizer = "bobyqa"))
model_compare %>%
broom.mixed::tidy(conf.int = TRUE) %>%
filter(effect == "fixed") %>%
rename("SE" = std.error,
"t" = statistic,
"p" = p.value) %>%
select(-group, -effect) %>%
mutate_at(vars(-contains("term"), -contains("p.value")), round, 2) %>%
mutate(term = gsub(":", " x ", term),
term = gsub("msg_", "", term),
term = gsub("_", " ", term),
term = gsub("within", "within", term),
term = gsub("between", "between", term),
term = gsub("rel self", "self relevance", term),
term = gsub("rel social", "social relevance", term),
term = gsub("sharing type", "sharing type (narrowcast)", term),
p = ifelse(p < .001, "< .001",
ifelse(p == 1, "1.000", gsub("0.(.*)", ".\\1", sprintf("%.3f", p)))),
`b [95% CI]` = sprintf("%.2f [%0.2f, %.2f]", estimate, conf.low, conf.high)) %>%
select(term, `b [95% CI]`, df, t, p) %>%
kable()  %>%
kable_styling()
table_model(model_data)
